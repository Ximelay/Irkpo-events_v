<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\EventController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\EventRegistrationController;
use App\Http\Controllers\EventTypeController;
use App\Http\Controllers\FacultyController;
use App\Http\Controllers\GroupController;
use App\Http\Controllers\RoleController;
use App\Http\Controllers\EventMediumController;
use App\Http\Controllers\FeedbackController;
use App\Http\Controllers\AttendanceController;
use App\Http\Controllers\EventChecklistController;
use App\Http\Controllers\EventResponsibleController;
use App\Http\Controllers\EventExpenseController;
use App\Http\Controllers\UserPointController;

/*
|--------------------------------------------------------------------------
| EventMaster API Routes
|--------------------------------------------------------------------------
|
| –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —É—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
| –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –∫–æ–ª–ª–µ–¥–∂–µ
|
*/

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
Route::get('/', function () {
    return response()->json([
        'message' => 'EventMaster API - –°–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–æ–ª–ª–µ–¥–∂–∞',
        'version' => '1.0',
        'status' => 'active',
        'features' => [
            '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏',
            '–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å QR-–∫–æ–¥–∞–º–∏',
            '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤',
            '–§–æ—Ç–æ/–≤–∏–¥–µ–æ –∞—Ä—Ö–∏–≤ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º',
            '–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–∞–ª–ª–∞–º–∏'
        ]
    ]);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

// ============================================================================
// üìÖ –ö–ê–õ–ï–ù–î–ê–†–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
// ============================================================================

// –°–æ–±—ã—Ç–∏—è (Events) - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
Route::apiResource('events', EventController::class);
Route::get('events-statistics', [EventController::class, 'statistics']);

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
Route::apiResource('event-types', EventTypeController::class);

// –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
Route::prefix('calendar')->group(function () {
    Route::get('/', function(Request $request) {
        $events = \App\Models\Event::with(['type', 'faculty'])
            ->when($request->faculty_id, fn($q) => $q->where('FacultyID', $request->faculty_id))
            ->when($request->type_id, fn($q) => $q->where('TypeID', $request->type_id))
            ->when($request->date_from, fn($q) => $q->where('StartDateTime', '>=', $request->date_from))
            ->when($request->date_to, fn($q) => $q->where('EndDateTime', '<=', $request->date_to))
            ->orderBy('StartDateTime')
            ->get();

        return response()->json([
            'success' => true,
            'data' => $events,
            'filters_applied' => $request->only(['faculty_id', 'type_id', 'date_from', 'date_to'])
        ]);
    });

    Route::get('upcoming', function() {
        $events = \App\Models\Event::with(['type', 'faculty'])
            ->where('StartDateTime', '>', now())
            ->orderBy('StartDateTime')
            ->limit(10)
            ->get();

        return response()->json(['success' => true, 'data' => $events]);
    });
});

// ============================================================================
// üë• –°–ò–°–¢–ï–ú–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–û–í
// ============================================================================

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
Route::apiResource('event-registrations', EventRegistrationController::class);
Route::post('register', [EventRegistrationController::class, 'register']);
Route::get('events/{event}/registrations', [EventRegistrationController::class, 'getEventRegistrations']);
Route::get('users/{user}/registrations', [EventRegistrationController::class, 'getUserRegistrations']);

// QR-–∫–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ (–±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–∑–∂–µ)
Route::prefix('qr')->group(function () {
    Route::get('generate/{registration}', function($registrationId) {
        return response()->json([
            'message' => 'QR-–∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'registration_id' => $registrationId,
            'qr_url' => "https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=registration_{$registrationId}"
        ]);
    });
});

// ============================================================================
// üìã –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß –î–õ–Ø –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–û–í
// ============================================================================

// –ß–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á
Route::apiResource('event-checklists', EventChecklistController::class);
Route::get('events/{event}/checklists', function($eventId) {
    $checklists = \App\Models\EventChecklist::where('EventID', $eventId)
        ->with(['assignee'])
        ->get();
    return response()->json(['success' => true, 'data' => $checklists]);
});

// –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –∑–∞–¥–∞—á–∏
Route::apiResource('event-responsibles', EventResponsibleController::class);

// –ö–æ–Ω—Ç—Ä–æ–ª—å –±—é–¥–∂–µ—Ç–∞
Route::apiResource('event-expenses', EventExpenseController::class);
Route::get('events/{event}/expenses', function($eventId) {
    $expenses = \App\Models\EventExpense::where('EventID', $eventId)
        ->with(['category', 'purchaser'])
        ->get();
    $total = $expenses->sum('Amount');

    return response()->json([
        'success' => true,
        'data' => $expenses,
        'total_spent' => $total
    ]);
});

// ============================================================================
// üì∏ –§–û–¢–û/–í–ò–î–ï–û –ê–†–•–ò–í
// ============================================================================

// –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ–±—ã—Ç–∏–π
Route::apiResource('event-media', EventMediumController::class);
Route::get('events/{event}/media', function($eventId) {
    $media = \App\Models\EventMedium::where('EventID', $eventId)
        ->with(['uploader', 'mediaType', 'votes'])
        ->get();
    return response()->json(['success' => true, 'data' => $media]);
});

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –º–µ–¥–∏–∞
Route::post('media/{media}/vote', function($mediaId, Request $request) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    $vote = \App\Models\MediaVote::updateOrCreate(
        ['MediaID' => $mediaId, 'UserID' => $request->user_id],
        ['VoteType' => $request->vote_type ?? 'like']
    );

    return response()->json(['success' => true, 'data' => $vote]);
});

// ============================================================================
// üèÜ –†–ï–ô–¢–ò–ù–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê
// ============================================================================

// –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Route::apiResource('user-points', UserPointController::class);

// –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
Route::get('leaderboard', function() {
    $topUsers = \App\Models\User::with(['role', 'group'])
        ->withSum('userPoints', 'Points')
        ->orderBy('user_points_sum_points', 'desc')
        ->limit(10)
        ->get();

    return response()->json(['success' => true, 'data' => $topUsers]);
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
Route::get('groups/{group}/activity', function($groupId) {
    $group = \App\Models\Group::with(['users.eventRegistrations', 'faculty'])->find($groupId);
    $stats = [
        'total_students' => $group->users->count(),
        'active_students' => $group->users->filter(fn($u) => $u->eventRegistrations->count() > 0)->count(),
        'total_registrations' => $group->users->sum(fn($u) => $u->eventRegistrations->count()),
        'total_points' => $group->users->sum(fn($u) => $u->userPoints->sum('Points'))
    ];

    return response()->json(['success' => true, 'data' => $stats]);
});

// ============================================================================
// üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
// ============================================================================

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
Route::apiResource('users', UserController::class);
Route::get('users/{user}/profile', [UserController::class, 'profile']);
Route::put('users/{user}/password', [UserController::class, 'updatePassword']);
Route::get('users-statistics', [UserController::class, 'statistics']);

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
Route::apiResource('faculties', FacultyController::class);
Route::apiResource('groups', GroupController::class);
Route::apiResource('roles', RoleController::class);

// ============================================================================
// üìù –û–¢–ó–´–í–´ –ò –ü–û–°–ï–©–ê–ï–ú–û–°–¢–¨
// ============================================================================

// –û—Ç–∑—ã–≤—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
Route::apiResource('feedback', FeedbackController::class);
Route::get('events/{event}/feedback', function($eventId) {
    $feedback = \App\Models\Feedback::whereHas('registration', function($q) use ($eventId) {
        $q->where('EventID', $eventId);
    })->with(['registration.user'])->get();

    return response()->json(['success' => true, 'data' => $feedback]);
});

// –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
Route::apiResource('attendance', AttendanceController::class);

// ============================================================================
// üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
// ============================================================================

Route::prefix('notifications')->group(function () {
    Route::get('/', function() {
        return response()->json([
            'message' => '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'planned_features' => [
                'Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                'Email —Ä–∞—Å—Å—ã–ª–∫–∏',
                'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö'
            ]
        ]);
    });
});

// ============================================================================
// üß™ –¢–ï–°–¢–û–í–´–ï –ò –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´
// ============================================================================

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π EventMaster
Route::get('features', function () {
    return response()->json([
        'EventMaster' => '–°–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–æ–ª–ª–µ–¥–∂–∞',
        'implemented_features' => [
            '‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
            '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            '‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤',
            '‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –±—é–¥–∂–µ—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
            '‚úÖ –§–æ—Ç–æ/–≤–∏–¥–µ–æ –∞—Ä—Ö–∏–≤ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º',
            '‚úÖ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–∞–ª–ª–∞–º–∏',
            '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
            '‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏'
        ],
        'in_development' => [
            'üîÑ QR-–∫–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏',
            'üîÑ Telegram/Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
            'üîÑ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
        ]
    ]);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
Route::get('health', function () {
    return response()->json([
        'status' => 'OK',
        'timestamp' => now(),
        'system' => 'EventMaster v1.0',
        'database' => 'connected'
    ]);
});
